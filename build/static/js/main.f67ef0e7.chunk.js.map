{"version":3,"sources":["components/ErrorMessage/ErrorMessage.jsx","utils/tokenService.js","utils/userService.js","pages/SignupPage/SignupPage.jsx","pages/LoginPage/LoginPage.jsx","utils/artService.js","components/Gallery/Gallery.jsx","components/PageHeader/PageHeader.jsx","pages/HomePage/HomePage.jsx","components/Canvas/Canvas.jsx","pages/CreatePage/CreatePage.jsx","pages/App/App.jsx","serviceWorker.js","index.js"],"names":["ErrorMessage","props","className","error","getToken","token","localStorage","getItem","JSON","parse","atob","split","exp","Date","now","removeItem","setToken","setItem","removeToken","getUserFromToken","user","BASE_URL","signup","fetch","method","headers","Headers","body","stringify","then","res","ok","json","Error","tokenService","logout","login","creds","getUser","SignUpPage","useState","setError","username","email","password","passwordConf","state","setState","history","useHistory","handleChange","e","target","name","value","a","preventDefault","userService","handleSignUpOrLogin","push","console","log","message","Grid","textAlign","style","height","verticalAlign","Column","maxWidth","Header","as","Image","src","Form","autoComplete","onSubmit","Segment","stacked","Input","placeholder","onChange","required","type","Button","LoginPage","color","fluid","size","Message","to","saveArt","art","getAll","Gallery","pieces","setPieces","numPieces","ArtService","artPieces","length","i","disabled","hideGrid","loadTimeOffset","saveData","compressedFile","useEffect","getArt","showArt","id","columns","padded","slice","reverse","map","piece","PageHeader","handleLogout","onClick","HomePage","Canvas","setColor","brushRadius","setBrushRadius","canvasRef","useRef","hex","event","handleSubmit","current","getSaveData","artData","divided","ref","brushColor","lazyRadius","Slider","defaultValue","min","max","valueLabelDisplay","CreatePage","Container","App","setUser","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.f67ef0e7.chunk.js","sourcesContent":["import React from 'react';\n\nexport default function ErrorMessage(props){\n    return <span className={\"error\"}>{props.error}</span>\n}","function setToken(token) {\n    if (token) {\n      localStorage.setItem('token', token);\n    } else {\n      localStorage.removeItem('token');\n    }\n  }\n  \n  function getToken() {\n    let token = localStorage.getItem('token');\n    if (token) {\n      const payload = JSON.parse(atob(token.split('.')[1]));\n      if (payload.exp < Date.now() / 1000) {\n        localStorage.removeItem('token');\n        token = null;\n      }\n    }\n    return token;\n  }\n  \n  function getUserFromToken() {\n    const token = getToken();\n    return token ? JSON.parse(atob(token.split('.')[1])).user : null;\n  }\n  \n  function removeToken() {\n    localStorage.removeItem('token');\n  }\n  \n  export default {\n    setToken,\n    getToken,\n    removeToken,\n    getUserFromToken\n  };","import tokenService from './tokenService';\n\nconst BASE_URL = '/api/users/';\n\n\n// NOTE THIS IS configured to send of a multi/part form request\n// aka photo \n// function signup(user) {\n//   return fetch(BASE_URL + 'signup', {\n//     method: 'POST',\n//     body: user\n//   })\n//   .then(res => {\n//     if (res.ok) return res.json();\n//     // Probably a duplicate email\n//     throw new Error('Email already taken!');\n//   })\n//   // Parameter destructuring!\n//   .then(({token}) => tokenService.setToken(token));\n//   // Setting our token in localStorage in our browser\n//   // then we'll be able to use with every request!\n//   // The above could have been written as\n//   //.then((token) => token.token);\n// }\n\nfunction signup(user) {\n  return fetch(BASE_URL + 'signup', {\n    method: 'POST',\n    headers: new Headers({'Content-Type': 'application/json'}),\n    body: JSON.stringify(user)\n  })\n  .then(res => {\n    if (res.ok) return res.json();\n    // Probably a duplicate email\n    throw new Error('Email already taken!');\n  })\n  // Parameter destructuring!\n  .then(({token}) => tokenService.setToken(token));\n  // Setting our token in localStorage in our browser\n  // then we'll be able to use with every request!\n  // The above could have been written as\n  //.then((token) => token.token);\n}\n\nfunction getUser() {\n  return tokenService.getUserFromToken();\n}\n\nfunction logout() {\n  tokenService.removeToken();\n}\n\nfunction login(creds) {\n  return fetch(BASE_URL + 'login', {\n    method: 'POST',\n    headers: new Headers({'Content-Type': 'application/json'}),\n    body: JSON.stringify(creds)\n  })\n  .then(res => {\n    // Valid login if we have a status of 2xx (res.ok)\n    if (res.ok) return res.json();\n    throw new Error('Bad Credentials!');\n  })\n  .then(({token}) => tokenService.setToken(token));\n}\n\n\nexport default {\n  signup, \n  logout,\n  login,\n  getUser\n};","import React, { useState } from 'react';\nimport ErrorMessage from '../../components/ErrorMessage/ErrorMessage';\nimport { Form, Grid, Header, Image, Segment, Button } from 'semantic-ui-react';\nimport userService from '../../utils/userService';\nimport { useHistory } from 'react-router-dom';\n\n\nexport default function SignUpPage(props){\n\n    const [error, setError ] = useState('');\n    const [selectedFile, setSelectedFile] = useState('');\n    const [state, setState] = useState({\n        username: '',\n        email: '',\n        password: '',\n        passwordConf: ''\n    });\n\n    const history = useHistory();\n\n    function handleChange(e) {\n        setState({\n            ...state,\n            [e.target.name]: e.target.value\n        })\n    }\n\n    async function handleSubmit(e){\n      e.preventDefault();\n\n      try {\n        await userService.signup(state);\n        props.handleSignUpOrLogin(); // gets the token from localstorage and updates the user state in our app.js\n        // with the correct user object from the current token\n        // then route to the homepage\n        history.push('/');\n\n      } catch (err) {\n        console.log(err.message);\n        setError(err.message);\n      }\n\n    }\n\n    return (\n        <>\n        <Grid textAlign='center' style={{ height: '100vh' }} verticalAlign='middle'>\n          <Grid.Column style={{ maxWidth: 450 }}>\n              <Header as='h2' textAlign='center'>\n                <Image src='https://image.flaticon.com/icons/png/512/3790/3790152.png' /> Sign Up\n              </Header>            \n                <Form autoComplete=\"off\"  onSubmit={handleSubmit}>\n                <Segment stacked>               \n                    <Form.Input                    \n                      name=\"username\"\n                      placeholder=\"username\"\n                      value={state.username}\n                      onChange={handleChange}\n                      required\n                    />\n                    <Form.Input\n                      type=\"email\"                  \n                      name=\"email\"\n                      placeholder=\"email\"\n                      value={ state.email}\n                      onChange={handleChange}\n                      required\n                    />\n                    <Form.Input             \n                      name=\"password\"\n                      type=\"password\"\n                      placeholder=\"password\"\n                      value={ state.password}\n                      onChange={handleChange}\n                      required\n                    />\n                    <Form.Input     \n                      name=\"passwordConf\"\n                      type=\"password\"\n                      placeholder=\"Confirm Password\"\n                      value={ state.passwordConf}\n                      onChange={handleChange}\n                      required\n                    />\n                    <Button\n                      type=\"submit\"\n                      className=\"btn\"\n                    >\n                    Signup\n                  </Button>\n                  </Segment>\n                  {error ? <ErrorMessage error={error} /> : null}\n                </Form>\n               \n            </Grid.Column>\n          </Grid>\n        </>\n      );   \n    \n}\n","import React, { useState } from 'react';\nimport './LoginPage.css';\nimport ErrorMessage from '../../components/ErrorMessage/ErrorMessage';\nimport userService from '../../utils/userService';\nimport { useHistory, Link } from 'react-router-dom';\nimport {\n    Button,\n    Form,\n    Grid,\n    Header,\n    Image,\n    Message,\n    Segment\n} from 'semantic-ui-react';\n\nexport default function LoginPage(props) {\n    const [error, setError] = useState('');\n    const [state, setState] = useState({\n        username: '',\n        password: ''\n    });\n\n    const history = useHistory();\n\n    function handleChange(e) {\n        setState({\n            ...state,\n            [e.target.name]: e.target.value,\n        });\n    }\n\n    async function handleSubmit(e) {\n        e.preventDefault();\n\n        try {\n            await userService.login(state);\n            props.handleSignUpOrLogin();\n            history.push('/');\n        } catch (err) {\n            setError(err.message);\n        }\n    }\n\n    return (\n        \n        <>\n            <Grid\n                textAlign=\"center\"\n                style={{ height: \"100vh\" }}\n                verticalAlign=\"middle\"\n            >\n            <Grid.Column style={{ maxWidth: 450 }}>\n            <Header as=\"h2\" textAlign=\"center\">\n                <Image src='https://image.flaticon.com/icons/png/512/3790/3790152.png' /> Log In\n            </Header>\n            <Form autoComplete=\"off\" onSubmit={handleSubmit}>\n                <Segment stacked>\n                <Form.Input\n                    name=\"username\"\n                    placeholder=\"username\"\n                    value={state.username}\n                    onChange={handleChange}\n                    required\n                />\n                <Form.Input\n                    name=\"password\"\n                    type=\"password\"\n                    placeholder=\"password\"\n                    value={state.password}\n                    onChange={handleChange}\n                    required\n                />\n                <Button\n                    color=\"teal\"\n                    fluid\n                    size=\"large\"\n                    type=\"submit\"\n                    className=\"btn\"\n                >\n                    Login\n                </Button>\n                </Segment>\n            </Form>\n            <Message>\n                New to us? <Link to=\"/signup\">Sign Up</Link>\n            </Message>\n            {error ? <ErrorMessage error={error} /> : null}\n            </Grid.Column>\n        </Grid>\n        </>\n    \n      \n      );\n}\n\n","import tokenService from './tokenService';\n\nconst BASE_URL = '/api/art/';\n\nexport function saveArt(art) {\n    console.log(art);\n    return fetch(BASE_URL + 'save', {\n        method: 'POST',\n        body: art,\n        headers: {\n            // ---- Need to look at content-type if I want to compress the files ----\n            // Look at content-type plain/text  or text/xml\n\n            'Content-type': 'application/json',\n            'Authorization': 'Bearer ' + tokenService.getToken()\n        }\n    }).then(res => {\n        console.log('res here ---->', res);\n        return res.json();\n    });\n}\n\nexport function getAll() {\n    return fetch(BASE_URL, {\n        headers: {\n            'Authorization': 'Bearer ' + tokenService.getToken()\n        }\n    }).then(res => res.json());\n}","import React, { useState, useRef, useEffect } from 'react';\nimport { Grid } from 'semantic-ui-react';\nimport CanvasDraw from 'react-canvas-draw';\nimport * as ArtService from '../../utils/artService';\nimport LZ from 'lz-string';\n\nexport default function Gallery() {\n    const [pieces, setPieces] = useState([]);\n    let numPieces = 0;\n\n    async function getArt() {\n        try {\n            const artPieces = await ArtService.getAll();\n            numPieces = artPieces.artPieces.length;\n            setPieces(artPieces.artPieces);\n        } catch (err) {\n            console.log(err, \"No art pieces uploaded\");\n        }\n    }\n\n    useEffect(() => {\n        getArt();\n    }, [])\n\n    async function showArt() {\n        for (let i=0; i<numPieces; i++) {\n            return (\n                <CanvasDraw \n                    disabled\n                    hideGrid\n                    loadTimeOffset={0}\n                    saveData={pieces[i].compressedFile}\n                />\n            )\n        }\n    }\n\n    useEffect(() => {\n        showArt();\n    }, [])\n\n    return (\n        <div id='gallery'>\n            <Grid columns={3} padded>\n                {pieces.slice(0).reverse().map((piece, i) => \n                    <Grid.Column>\n                        <CanvasDraw\n                            disabled\n                            hideGrid\n                            loadTimeOffset={0}\n                            saveData={piece.compressedFile}\n                        />\n                    </Grid.Column>\n                )}\n            </Grid>\n        </div>\n    )\n}","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Header, Segment } from 'semantic-ui-react';\n\nexport default function PageHeader({user, handleLogout}) {\n    return (\n        <>\n            <Header>\n                <Link to='/'>\n                    <h1 id='site-title'>Graffiti Wall</h1>\n                </Link>\n            </Header>\n            <Header as='h2'>\n                <Link className='site-action' to='/create'>\n                    Make your Mark\n                </Link>\n                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n                <Link className='site-action' to='' onClick={handleLogout}>\n                    PTFO\n                </Link>\n            </Header>\n        </>\n    )\n}","import React, { useState } from 'react';\nimport './HomePage.css';\nimport ErrorMessage from '../../components/ErrorMessage/ErrorMessage';\nimport Gallery from '../../components/Gallery/Gallery';\nimport userService from '../../utils/userService';\nimport {Header} from 'semantic-ui-react';\nimport {Link} from 'react-router-dom';\nimport PageHeader from '../../components/PageHeader/PageHeader';\n\nexport default function HomePage({user, handleLogout}) {\n    return (\n        <>\n            <PageHeader/>\n            <div id='gallery'>\n                <Gallery />\n            </div>\n        </>\n    )\n}","import React, { useState, useRef, useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport * as ArtService from '../../utils/artService';\nimport CanvasDraw from \"react-canvas-draw\";\nimport { Grid, Button } from 'semantic-ui-react';\nimport { CirclePicker, AlphaPicker } from 'react-color';\nimport Slider from '@material-ui/core/Slider';\nimport LZ from 'lz-string';\n\nexport default function Canvas(props) {\n    const [color, setColor] = useState('#666666');\n    const [transparency, setTransparency] = useState();\n    const [brushRadius, setBrushRadius] = useState(6);\n    const [art, setArt] = useState('art');\n    \n    const canvasRef = useRef();\n\n    const history = useHistory();\n\n    async function updateColor(value) {\n        setColor(value.hex);\n    }\n\n    async function updateBrushRadius(event, value) {\n        setBrushRadius(value);\n    }\n\n    // async function updateTransparency(value) {\n    //     setTransparency(value);\n    // }\n\n    const handleSubmit = async () => {\n        let artData = await canvasRef.current.getSaveData();\n        // ---- Compression for saving the art piece to the db -----\n        // artData = LZ.compressToBase64(artData);\n        // artData = [artData.toString()];\n        // console.log(artData);\n        // console.log(typeof(artData));\n        let piece = await ArtService.saveArt(artData);\n        console.log(piece.compressedFile);\n\n        history.push('/');\n    }\n\n    return (\n        <>\n            <Grid divided='horizontally' columns={2}>\n                <Grid.Column>\n                    <CanvasDraw\n                        ref={canvasRef}\n                        brushColor={color}\n                        // transparency={transparency}\n                        brushRadius={brushRadius}\n                        lazyRadius={1}\n                    />\n                </Grid.Column>\n                <Grid.Column>\n                    <CirclePicker \n                        color={color}\n                        onChange={updateColor}\n                    />\n                    {/* <AlphaPicker onChange={updateTransparency} color={color}/> */}\n                    <Slider\n                        defaultValue={brushRadius}\n                        min={1}\n                        max={100}\n                        onChange={updateBrushRadius}\n                        valueLabelDisplay='on'\n                    />\n                    <Button onClick={handleSubmit}>Add to Wall</Button>\n                </Grid.Column>\n                \n            </Grid>\n        </>\n    )\n}","import React, { useState } from 'react';\nimport './CreatePage.css';\nimport ErrorMessage from '../../components/ErrorMessage/ErrorMessage';\nimport userService from '../../utils/userService';\nimport PageHeader from '../../components/PageHeader/PageHeader';\nimport Canvas from '../../components/Canvas/Canvas';\nimport { useHistory, Link } from 'react-router-dom';\nimport { Header, Grid, Container } from 'semantic-ui-react';\n\nexport default function CreatePage({user, handleLogout}) {\n\n    return (\n        <>\n            <PageHeader />\n            <Container>\n                <Canvas />\n            </Container>\n        </>\n    )\n}","import React, {useState} from 'react';\nimport { Redirect, Route, Switch } from 'react-router-dom';\nimport './App.css';\nimport SignupPage from '../SignupPage/SignupPage';\nimport LoginPage from '../LoginPage/LoginPage';\nimport HomePage from '../HomePage/HomePage';\nimport CreatePage from '../CreatePage/CreatePage';\nimport userService from '../../utils/userService'\n\n\nfunction App() {\n\n  const [user, setUser] = useState(userService.getUser()); // getUser decodes our JWT token, into a javascript object\n  // this object corresponds to the jwt payload which is defined in the server signup or login function that looks like \n  // this  const token = createJWT(user); // where user was the document we created from mongo\n\n  function handleSignUpOrLogin(){\n    setUser(userService.getUser()); // getting the user from localstorage decoding the jwt\n  }\n\n  function handleLogout(){\n    userService.logout();\n    setUser({user: null});\n  }\n\n  return (\n    <div className=\"App\">\n      <Switch>\n          <Route exact path=\"/login\">\n             <LoginPage handleSignUpOrLogin={handleSignUpOrLogin}/>\n          </Route>\n          <Route exact path=\"/signup\">\n             <SignupPage handleSignUpOrLogin={handleSignUpOrLogin}/>\n          </Route>\n          {userService.getUser() ? \n            <> \n             <Switch>\n                <Route exact path=\"/\">\n                  <HomePage />\n                </Route>\n                <Route exact path='/create'>\n                  <CreatePage />\n                </Route>\n            </Switch>\n            </>\n            :\n            <Redirect to='/login'/>\n          }\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css';\nimport './index.css';\nimport App from './pages/App/App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nReactDOM.render(\n  <Router><App/></Router>,\n  document.getElementById('root')\n);\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}